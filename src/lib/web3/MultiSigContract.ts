// This file contains the ABI and bytecode for the multi-sig wallet contract
// We'll use this to deploy and interact with the contract on EVM chains

export const MULTI_SIG_WALLET_ABI = [
  // Constructor
  "constructor(address[] memory _owners, uint _required)",

  // Events
  "event Confirmation(address indexed sender, uint indexed transactionId)",
  "event Revocation(address indexed sender, uint indexed transactionId)",
  "event Submission(uint indexed transactionId)",
  "event Execution(uint indexed transactionId)",
  "event ExecutionFailure(uint indexed transactionId)",
  "event Deposit(address indexed sender, uint value)",
  "event OwnerAddition(address indexed owner)",
  "event OwnerRemoval(address indexed owner)",
  "event RequirementChange(uint required)",

  // Fallback function
  "receive() external payable",

  // Public functions
  "function submitTransaction(address destination, uint value, bytes memory data) public returns (uint transactionId)",
  "function confirmTransaction(uint transactionId) public",
  "function revokeConfirmation(uint transactionId) public",
  "function executeTransaction(uint transactionId) public returns (bool)",
  "function addOwner(address owner) public",
  "function removeOwner(address owner) public",
  "function replaceOwner(address owner, address newOwner) public",
  "function changeRequirement(uint _required) public",

  // View functions
  "function isOwner(address) public view returns (bool)",
  "function getOwners() public view returns (address[] memory)",
  "function getTransactionCount(bool pending, bool executed) public view returns (uint)",
  "function getConfirmationCount(uint transactionId) public view returns (uint)",
  "function getTransactionIds(uint from, uint to, bool pending, bool executed) public view returns (uint[] memory)",
  "function getConfirmations(uint transactionId) public view returns (address[] memory)",
  "function transactions(uint) public view returns (address destination, uint value, bytes memory data, bool executed)",
  "function confirmations(uint, address) public view returns (bool)",
  "function required() public view returns (uint)",
];

// This is a simplified version of the Gnosis Safe contract bytecode
// In a real implementation, we would use the actual bytecode or deploy via a factory
export const MULTI_SIG_WALLET_BYTECODE =
  "0x608060405234801561001057600080fd5b50604051610f38380380610f388339818101604052604081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b8382019150602082018581111561006957600080fd5b825186602082028301116401000000008211171561008657600080fd5b8083526020830192505050908051906020019060200280838360005b838110156100bd5780820151818401526020810190506100a2565b50505050905001604052602001805190602001909291905050508160008151118015610109575060008214155b8015610115575060008151115b61011e57600080fd5b60008090505b815181101561019b57600160008084815181106101003d57808211156101a0578190fd5b602090810290910101516001600160a01b03168252602082019190915260400160002080546001600160a81b0319166001600160a01b0392909216919091179055600101610124565b50600282905560005b8151811015610201576002600160008084815181106101003d578082111561020657600080fd5b602090810290910101516001600160a01b031682526020820191909152604001600020805460ff19169115159190911790556001016101a6565b505050610d1d806102146000396000f3fe6080604052600436106100a75760003560e01c8063797af6271161006457806379ba50971161004e57806379ba5097146102e3578063a0e67e2b146102f8578063dc8452cd1461035d57610107565b8063797af627146102a057806379ba5097146102e357610107565b80632f54bf6e116100a05780632f54bf6e146101c15780633411c81c1461020657806354741525146102495780637065cb4814610279578063784547a71461028c57610107565b8063025e7c27146101075780632f54bf6e146101c157610107565b366101075760008060008060006040516020016100c4929190610c8a565b60408051601f19818403018152908290526100de91610c8a565b6040516020818303038152906040528051906020012060001c9050600034905060405136600082376000803683855af43d806000843e8180156101235780600181146101295761012f565b8280f35b8280fd5b50505050005b34801561011357600080fd5b5061013a6004803603602081101561012a57600080fd5b50356001600160a01b0316610382565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017457818101518382015260200161015c565b50505050905090810190601f1680156101a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101cd57600080fd5b506101f2600480360360208110156101e457600080fd5b50356001600160a01b0316610419565b604080519115158252519081900360200190f35b34801561021257600080fd5b506101f26004803603604081101561022957600080fd5b50803590602001356001600160a01b0316610434565b34801561025557600080fd5b506102676004803603602081101561026c57600080fd5b5035610459565b60408051918252519081900360200190f35b34801561028557600080fd5b5061028c6104a8565b005b34801561029857600080fd5b5061028c6104f9565b3480156102ac57600080fd5b506102cf600480360360208110156102c357600080fd5b50356001600160a01b0316610549565b604080519115158252519081900360200190f35b3480156102ef57600080fd5b5061028c610564565b34801561030457600080fd5b5061030d6105b4565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610349578181015183820152602001610331565b505050509050019250505060405180910390f35b34801561036957600080fd5b50610372610617565b6040805191825251908190036020019081900390f35b6000818154811061038f57fe5b6000918252602090912001546001600160a01b0316905081565b60026020526000908152604090205460ff1681565b600360209081526000928352604080842090915290825290205460ff1681565b600080805b60015481101561049e57600081815481106104755757fe5b6000918252602082200154604080516001600160a01b039092168252519081900360200190a1600101610460565b50919050565b6001546104b590610459565b6104be57600080fd5b6104c733610419565b6104d057600080fd5b6104d981610549565b6104e257600080fd5b600280546001019055610100610564565b6001546105069061045956610509565b600080fd5b61051233610419565b61051b57600080fd5b61052481610549565b61052d57600080fd5b600280546001900390556101006105b4565b60026020526000908152604090205460ff1681565b6001546105719061045956610574565b600080fd5b61057d33610419565b61058657600080fd5b61058f81610549565b61059857600080fd5b600280546001019055610100610617565b6060600080548060200260200160405190810160405280929190818152602001828054801561060d57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105ef575b5050505050905090565b6002548156fea265627a7a723158209c2e35d0b33364cdda7d4ea01f87e4c0d29f2e8d4b3a4b1a1180e2547d3f02a964736f6c634300050c0032";

// Function to deploy a multi-sig wallet contract
export const deployMultiSigWallet = async (
  provider: any,
  owners: string[],
  threshold: number,
): Promise<string> => {
  try {
    const signer = provider.getSigner();
    const factory = new ethers.ContractFactory(
      MULTI_SIG_WALLET_ABI,
      MULTI_SIG_WALLET_BYTECODE,
      signer,
    );

    const contract = await factory.deploy(owners, threshold);
    await contract.deployed();

    return contract.address;
  } catch (error) {
    console.error("Error deploying multi-sig wallet contract:", error);
    throw error;
  }
};

// Function to create a contract instance for an existing multi-sig wallet
export const getMultiSigWalletContract = (address: string, provider: any) => {
  return new ethers.Contract(address, MULTI_SIG_WALLET_ABI, provider);
};
